// ------------------
// START >> INIT
// ------------------

defaultTasks "client", "server", "Solder-config", "Solder-appeng", "Solder-autoutils", "Solder-ChickenChunks","Solder-CodeChickenCore", "Solder-ComeCloser", "Solder-EnderIOr", "Solder-EnderTanks", "Solder-extrabiomesxl", "Solder-extrautils", "Solder-Galacticraft", "Solder-Galacticraft-Planets" ,"Solder-ICBM", "Solder-InventoryTweaks", "Solder-ironchest", "Solder-MadScience", "Solder-Minechem", "Solder-MineFactoryReloaded", "Solder-MFFS", "Solder-MPS", "Solder-neiaddons", "Solder-NEIPlugins", "Solder-NEI", "Solder-OpenEye", "Solder-PowerCrystalsCore", "Solder-mpsaddons", "Solder-Railcraft", "Solder-RE", "Solder-secretrooms", "Solder-shetiphiancore", "Solder-SmoothBedrock", "Solder-ThermalExpansion", "Solder-UE", "Solder-Waila", "Solder-wrcbe", "Solder-armorstatushud", "Solder-custombranding", "Solder-noVoidFogNoDimming", "Solder-zansminimap", "Solder-RI", "Solder-appeng2", "Solder-AdvancedSP", "Solder-SolderSolder"

ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

// Set build number to default if evnrionment variable does not exist.
if (System.getenv("BUILD_NUMBER") != null) {
    ext.pack_version = "${config.packVersionMajor}.${config.packVersionMinor}.${System.getenv().BUILD_NUMBER}"
}
else {
    ext.pack_version = "${config.packVersionMajor}.${config.packVersionMinor}.${config.packNonJenkinsBuild}"
}

wrapper {
    version = "1.8"
}

// ------------------
// START >>   CLIENT
// ------------------

task("client", type: Zip) {
    group = 'modpack'
    description = 'Builds a   client modpack zip'

    // Grab all the files that make up a client installation.
    from('.')
	{
        include 'bin/**'
        include 'config/**'
        include 'coremods/**'
		include 'resourcepacks/**'
		include 'texturepacks/**'
		include 'libraries/**'
        include 'mods/**'
    }
	
	// Copy over default server for multiplayer menu.
    from('./clientextra')
	{
        include '**/*.dat'
	}

    // Copy over client only mods into mods folder.
    into('mods'){ from fileTree('clientmods') }
	
	// Copy over client only configuration into config folder to temporary build directory.
	into('config'){ from fileTree('clientconfig') }
	
	// Replace the CustomBranding config with our version information.
	String contents = new File( 'clientbranding/CustomBranding.cfg' ).getText( 'UTF-8' )
	contents = contents.replaceAll( '@VERSION@', pack_version )
	
	// Create the new file that will take its place.
	new File( 'config/CustomBranding.cfg' ).write(contents, 'UTF-8' )
	
	// Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // info output.
    eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    baseName = "./output/${config.archivesBaseName}-$pack_version-client"

    // Logging is always important.
	doLast { logger.lifecycle "  Client Created: $archivePath" }
}

// ------------------
// START >>   SERVER
// ------------------

task("server", type: Zip)
{
    group = 'modpack'
    description = 'Builds a   server modpack zip'

    // Grab all the files that makeup a server installation.
    from('.')
	{
        include 'bin/**'
        include 'config/**'
        include 'coremods/**'
        include 'mods/**'
		include 'libraries/**'
    }
	
	// Copy over server only config.
	into('config'){ from fileTree('serverconfig') }
	
	// Copy over server only mods.
	into('mods'){ from fileTree('servermods') }
	
	// Copy over MC server properties, whitelists, scripts, etc.
	from('./serverextra')
	{
        include '**/**'
	}
	
	// Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }

    // Create base filename for our creation.
    baseName = "./output/${config.archivesBaseName}-$pack_version-server"

    // Logging is always important.
    doLast { logger.lifecycle "  Server Created: $archivePath" }
}

task("Solder-config", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'config/**'
    }	
    into('config'){ from fileTree('clientconfig') }
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/z-${config.archivesBaseName}-configs-v$pack_version"
}

task("Solder-appeng", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/appeng-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/applied-energistics/applied-energistics-v${config.appeng}-${config.minecraft_version}"
}

task("Solder-autoutils", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/autoutils-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/autoutils/autoutils-v$pack_version-${config.minecraft_version}"
}
task("Solder-SolderSolder", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'output/Technic-solder/**'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder-v$pack_version-${config.minecraft_version}"
}
task("Solder-ChickenChunks", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ChickenChunks *.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/chickenchunks/chickenchunks-v${config.CChunks}-${config.minecraft_version}"
}

task("Solder-CodeChickenCore", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/CodeChickenCore *.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/codechickencore/codechickencore-v${config.CodeCCore}-${config.minecraft_version}"
}

task("Solder-ComeCloser", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ComeCloser-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/comecloser/comecloser-v${config.ComeCLoser}-${config.minecraft_version}"
}

task("Solder-EnderIOr", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/EnderIO-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/ender-io/ender-io-v${config.EnderIO}-${config.minecraft_version}"
}

task("Solder-EnderTanks", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/EnderTanks-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/endertanks/endertanks-v${config.cendertanks}-${config.minecraft_version}"
}

task("Solder-extrabiomesxl", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/extrabiomesxl-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/extrabiomesxl/extrabiomesxl-v${config.extrabiomesxl}-${config.minecraft_version}"
}

task("Solder-extrautils", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/extrautils-*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/extrautils/extrautils-v$pack_version-${config.minecraft_version}"
}

task("Solder-Galacticraft", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Galacticraft-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/galacticraft/galacticraft-v${config.Galacticraft}-${config.minecraft_version}"
}

task("Solder-Galacticraft-Planets", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Galacticraft-Planets-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/galacticraft-planets/galacticraft-planets-v${config.GalacticraftPlanets}-${config.minecraft_version}"
}

task("Solder-ICBM", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ICBM-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/ue-icbm/ue-icbm-v${config.ICBM}-${config.minecraft_version}"
}

task("Solder-InventoryTweaks", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/InventoryTweaks-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/inventorytweaks/inventorytweaks-v${config.InvTweeks}-${config.minecraft_version}"
}

task("Solder-ironchest", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ironchest-*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/ironchests/ironchests-v${config.ironchests}-${config.minecraft_version}"
}

task("Solder-MadScience", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/MadScience-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/madscience/madscience-v${config.MadScience}-${config.minecraft_version}"
}

task("Solder-Minechem", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Minechem-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/minechem/minechem-v${config.minechem}-${config.minecraft_version}"
}

task("Solder-MineFactoryReloaded", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/MineFactoryReloaded-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/mfr/mfr-v${config.MFR}-${config.minecraft_version}"
}

task("Solder-MFFS", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Modular-Force-Field-System-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/calc-mffs/calc-mffs-v${config.calcmffs}-${config.minecraft_version}"
}

task("Solder-MPS", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ModularPowersuits-*.jar'
        include 'mods/numina-*.jar'
        include 'mods/slick-util.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/ue-mps/ue-mps-v${config.mps}-${config.minecraft_version}"
}

task("Solder-neiaddons", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/neiaddons-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/nei-addons/nei-addons-v${config.neiaddons}-${config.minecraft_version}"
}

task("Solder-NEIPlugins", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/NEIPlugins-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/nei-plugin/nei-plugin-v${config.neiplugins}-${config.minecraft_version}"
}

task("Solder-NEI", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/NotEnoughItems *.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/nei/nei-v${config.NEI}-${config.minecraft_version}"
}

task("Solder-OpenComputers", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/OpenComputers-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/opencomputers/opencomputers-v${config.OC}-${config.minecraft_version}"
}

task("Solder-OpenEye", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/OpenEye-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/openeye/openeye-v${config.OpenEye}-${config.minecraft_version}"
}

task("Solder-PowerCrystalsCore", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/PowerCrystalsCore-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/powercrystalscore/powercrystalscore-v${config.PowerCC}-${config.minecraft_version}"
}

task("Solder-mpsaddons", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/powersuitaddons-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/mpsaddons/mpsaddons-v${config.MPSAddons}-${config.minecraft_version}"
}

task("Solder-Railcraft", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Railcraft_*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/rc/rc-v${config.Railcraft}-${config.minecraft_version}"
}

task("Solder-RE", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Resonant-Engine-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/re/re-v${config.ResonantEngine}-${config.minecraft_version}"
}

task("Solder-secretrooms", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/SecretRoomsMod-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/secretrooms/secretrooms-v${config.secretrooms}-${config.minecraft_version}"
}

task("Solder-shetiphiancore", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ShetiPhianCore-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/shetiphiancore/shetiphiancore-v${config.shetiphiancore}-${config.minecraft_version}"
}

task("Solder-SmoothBedrock", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/SmoothBedrock-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/smoothbedrock/smoothbedrock-v${config.smoothbedrock}-${config.minecraft_version}"
}

task("Solder-ThermalExpansion", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/ThermalExpansion-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/thermalexpansion/thermalexpansion-v${config.ThermalE}-${config.minecraft_version}"
}

task("Solder-UE", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Universal-Electricity-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/ue-core/ue-core-v${config.UE}-${config.minecraft_version}"
}

task("Solder-Waila", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/Waila_*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/waila/waila-v${config.waila}-${config.minecraft_version}"
}
task("Solder-wrcbe", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/WR-CBE *.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/wrcbe/wrcbe-v${config.wrcbe}-${config.minecraft_version}"
}

task("Solder-armorstatushud", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'clientmods/[1.6.4]ArmorStatusHUD*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/armorstatushud/armorstatushud-v${config.armorstatushud}-${config.minecraft_version}"
}

task("Solder-custombranding", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'clientmods/Custom Branding*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/custombranding/custombranding-v${config.custombranding}-${config.minecraft_version}"
}

task("Solder-noVoidFogNoDimming", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'clientmods/noVoidFogNoDimmingModloaderForge*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/novoidfog/novoidfog-${config.minecraft_version}"
}

task("Solder-zansminimap", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'clientmods/zansminimap*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/zansminimap/zansminimap-${config.minecraft_version}"
}

task("Solder-RI", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'clientmods/Resonant-induction-*.zip'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/ue-resonantinduction/ue-resonantinduction-${config.UERI}-${config.minecraft_version}"
}

task("Solder-appeng2", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/appliedenergistics2-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/applied-energistics/applied-energistics-v${config.appeng}-${config.minecraft_version}"
}

task("Solder-appeng2", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/advancedgenetics-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/applied-energistics/applied-energistics-v${config.AE2}-${config.minecraft_version}"
}

task("Solder-AdvancedSP", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/AdvancedSolarPanel-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/applied-energistics/applied-energistics-v${config.AdvancedSP}-${config.minecraft_version}"
}

task("Solder-AdvancedSP", type: Zip)
{

    group = 'modpack'
    description = 'Builds a   Solder modpack zip'
    // Grab all the files that makeup a server installation.
    from('.')
	{

        include 'mods/AdvancedSolarPanel-*.jar'
    }	
    
    // Print out each file that we package into the mod pack.
    eachFile { file -> logger.lifecycle "packing $file" }
    
    baseName = "./output/Technic-solder/applied-energistics/applied-energistics-v${config.AdvancedSP}-${config.minecraft_version}"
}